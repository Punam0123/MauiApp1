@page "/Debt"
@using MauiApp1.Models
@inject NavigationManager Navigation
@inject UserService UserService

<h3 class="text-3xl font-bold mb-8 text-center text-black-700">Take Debt</h3>

@if (HasOutstandingDebt)
{
    <div class="text-center text-red-600 font-semibold">
        <p>You already have an outstanding debt of <strong>@TotalDebt</strong>. Please pay it off before taking another debt.</p>
        <button class="mt-4 px-5 py-2 bg-purple-500 text-white font-semibold rounded-md shadow-md hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-1 transition duration-300 ease-in-out transform hover:scale-105"
                @onclick="NavigateToDebtDetails">
            View Your Debt
        </button>
    </div>
}
else
{
    <form class="space-y-4 bg-white p-6 rounded-lg shadow-md max-w-md mx-auto">
        <div>
            <label for="amount" class="block text-md font-medium text-gray-800">Amount:</label>
            <input type="number" id="amount" name="amount" @bind="Amount" required
                   class="mt-1 block w-full px-3 py-2 border-2 border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                   step="any" min="0" />
        </div>

        <div>
            <label for="description" class="block text-md font-medium text-gray-800">Description:</label>
            <textarea id="description" name="description" @bind="Description" rows="3" required
                      class="mt-1 block w-full px-3 py-2 border-2 border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500"></textarea>
        </div>

        <div class="flex justify-center">
            <button type="button" @onclick="HandleTakeDebt" class="px-5 py-2 bg-purple-500 text-white font-semibold rounded-md shadow-md hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-1 transition duration-300 ease-in-out transform hover:scale-105">
                Submit Debt
            </button>
        </div>
    </form>
}

@code {
    private decimal Amount { get; set; }
    private string Description { get; set; }
    private bool HasOutstandingDebt { get; set; } = false;
    private decimal TotalDebt { get; set; } = 0; // Store the total debt amount
    private int LoggedInUserId { get; set; } = 1; // Replace with actual logged-in user ID from authentication

    protected override async Task OnInitializedAsync()
    {
        // Check if the user has any outstanding debt
        HasOutstandingDebt = await UserService.HasOutstandingDebtAsync(LoggedInUserId);

        if (HasOutstandingDebt)
        {
            // Fetch total debt amount
            TotalDebt = await UserService.GetTotalDebtAmountAsync(LoggedInUserId);
        }
    }

    private async Task HandleTakeDebt()
    {
        try
        {
            // Validate input fields
            if (Amount <= 0 || string.IsNullOrWhiteSpace(Description))
            {
                return; // Handle validation failure as needed
            }

            // Create a new Debt object
            var debt = new MauiApp1.Models.Debt
                {
                    UserId = LoggedInUserId,  // Use the logged-in user's ID
                    Amount = Amount,
                    PaidAmount = 0,  // Initially no amount is paid
                    Description = Description,
                    Date = DateTime.Now
                };

            // Add debt to the data (this also saves the data)
            await UserService.AddDebtAsync(debt);

            // Show a success message (consider using a Toast/Snackbar for better UX)
            Console.WriteLine("Debt submitted successfully!");

            // Navigate to the debts page
            Navigation.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            // Handle the exception and log it
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void NavigateToDebtDetails()
    {
        // Navigate to a page showing the user's debt details
        Navigation.NavigateTo("/dashboard");
    }
}
