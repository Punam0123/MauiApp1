@page "/CashOutflow"
@using MauiApp1.Models
@inject NavigationManager Navigation
@inject UserService UserService

<h3 class="text-4xl font-bold mb-8 text-center text-orange-900">Cash Outflow</h3>

<form class="space-y-8 bg-white p-10 rounded-xl shadow-2xl max-w-2xl mx-auto" @onsubmit="HandleFormSubmit">
    <div>
        <label for="title" class="block text-lg font-medium text-gray-800">Title:</label>
        <input type="text" id="title" name="title" @bind="Title" required
               class="mt-3 block w-full px-6 py-4 border-2 border-gray-300 rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-orange-600 focus:border-orange-600 transition duration-300" />
        @if (!string.IsNullOrEmpty(TitleError))
        {
            <div class="text-red-600 text-sm mt-1">@TitleError</div>
        }
    </div>

    <div>
        <label for="tags" class="block text-lg font-medium text-gray-800">Tags:</label>
        <input type="text" id="tags" name="tags" @bind="Tags" required
               class="mt-3 block w-full px-6 py-4 border-2 border-gray-300 rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-orange-600 focus:border-orange-600 transition duration-300" />
        @if (!string.IsNullOrEmpty(TagsError))
        {
            <div class="text-red-600 text-sm mt-1">@TagsError</div>
        }
    </div>

    <div>
        <label for="debit" class="block text-lg font-medium text-gray-800">Debit:</label>
        <input type="number" id="debit" name="debit" @bind="Debit" required
               class="mt-3 block w-full px-6 py-4 border-2 border-gray-300 rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-orange-600 focus:border-orange-600 transition duration-300"
               step="any" min="0" />
        @if (!string.IsNullOrEmpty(DebitError))
        {
            <div class="text-red-600 text-sm mt-1">@DebitError</div>
        }
    </div>

    <div>
        <label for="description" class="block text-lg font-medium text-gray-800">Description:</label>
        <textarea id="description" name="description" @bind="Description" rows="4" required
                  class="mt-3 block w-full px-6 py-4 border-2 border-gray-300 rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-orange-600 focus:border-orange-600 transition duration-300"></textarea>
        @if (!string.IsNullOrEmpty(DescriptionError))
        {
            <div class="text-red-600 text-sm mt-1">@DescriptionError</div>
        }
    </div>

    <div class="flex justify-center">
        <button type="submit" class="px-8 py-3 bg-orange-600 text-black font-semibold rounded-lg shadow-lg hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 transition duration-300 ease-in-out transform hover:scale-105">
            Submit
        </button>
    </div>
</form>

<!-- Success Popup -->
@if (ShowSuccessPopup)
{
    <div class="fixed inset-0 bg-gray-500 bg-opacity-50 flex justify-center items-center z-50">
        <div class="bg-white p-8 rounded-lg shadow-xl transform transition duration-300 scale-95 hover:scale-100">
            <h2 class="text-2xl font-bold text-center text-green-600">Transaction Successful!</h2>
            <p class="mt-4 text-center text-gray-700">Your transaction of <strong>@Debit</strong> has been successfully sent.</p>
            <div class="mt-6 text-center">
                <button class="px-8 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition duration-200" @onclick="CloseSuccessPopup">OK</button>
            </div>
        </div>
    </div>
}

<!-- Insufficient Balance Popup -->
@if (ShowInsufficientBalancePopup)
{
    <div class="fixed inset-0 bg-gray-500 bg-opacity-50 flex justify-center items-center z-50">
        <div class="bg-white p-8 rounded-lg shadow-xl transform transition duration-300 scale-95 hover:scale-100">
            <h2 class="text-2xl font-bold text-center text-red-600">Insufficient Balance</h2>
            <p class="mt-4 text-center text-gray-700">Your balance is insufficient for cash outflow. Make balance sufficient</p>
            <div class="mt-6 flex justify-center space-x-4">
                <button class="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-orange-700 transition duration-200" @onclick="RedirectToLoanPage">Apply for Loan</button>
                <button class="px-8 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition duration-200" @onclick="CloseInsufficientBalancePopup">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    private string Title { get; set; }
    private string Tags { get; set; }
    private decimal Debit { get; set; }
    private string Description { get; set; }

    private string TitleError { get; set; }
    private string TagsError { get; set; }
    private string DebitError { get; set; }
    private string DescriptionError { get; set; }

    private bool ShowSuccessPopup { get; set; } = false;
    private bool ShowInsufficientBalancePopup { get; set; } = false;

    private decimal CalculateCurrentBalance()
    {
        var appData = UserService.LoadData();
        decimal totalCredit = appData.Transactions.Sum(t => t.Credit);
        decimal totalDebit = appData.Transactions.Sum(t => t.Debit);
        return totalCredit - totalDebit;
    }

    private async Task HandleFormSubmit()
    {
        // Reset error messages
        TitleError = TagsError = DebitError = DescriptionError = null;

        // Validation checks
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(Title))
        {
            TitleError = "Title is mandatory";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(Tags))
        {
            TagsError = "Tags are mandatory";
            isValid = false;
        }

        if (Debit <= 0)
        {
            DebitError = "Debit is mandatory and must be greater than 0";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(Description))
        {
            DescriptionError = "Description is mandatory";
            isValid = false;
        }

        if (!isValid)
        {
            return;
        }

        // Check if there's sufficient balance
        decimal currentBalance = CalculateCurrentBalance();
        if (currentBalance < Debit)
        {
            ShowInsufficientBalancePopup = true;
            return;
        }

        // Create a new Transaction for Cash Outflow
        var transaction = new Transaction
            {
                Id = Guid.NewGuid(),
                Title = Title,
                Tags = Tags,
                Credit = 0,
                Debit = Debit,
                Description = Description,
                Date = DateTime.Now
            };

        // Load existing data and add the new transaction
        var appData = UserService.LoadData();
        appData.Transactions.Add(transaction);

        // Save updated data
        UserService.SaveData(appData);

        // Show the success popup
        ShowSuccessPopup = true;

        // Wait for 2 seconds before navigating to the dashboard
        await Task.Delay(2000);

        // Close the popup and navigate to the dashboard
        ShowSuccessPopup = false;
        Navigation.NavigateTo("/mytransaction");
    }

    private void CloseSuccessPopup()
    {
        ShowSuccessPopup = false;
        Navigation.NavigateTo("/mytransaction");
    }

    private void CloseInsufficientBalancePopup()
    {
        ShowInsufficientBalancePopup = false;
    }

    private void RedirectToLoanPage()
    {
        ShowInsufficientBalancePopup = false;
        Navigation.NavigateTo("/Debt");
    }
}