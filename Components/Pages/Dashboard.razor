@page "/dashboard"
@using MauiApp1.Models
@inject NavigationManager Navigation
@using MauiApp1.Components.Layout
@inject UserService UserService

<div class="container-fluid p-6">
    <!-- Greeting Section -->
    <div class="mb-6">
        <h3 class="text-2xl font-semibold text-gray-700">Welcome, @UserName</h3>
    </div>

    <!-- Transaction Summary Section -->
    <div class="bg-white shadow-2xl rounded-lg p-6 mb-8 border border-gray-200">
        <h5 class="text-xl font-bold text-gray-700 text-center mb-4">Transaction Summary</h5>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-6">
            <!-- Total Cash Inflow -->
            <div class="bg-pink-50 p-4 rounded-lg shadow-xl flex items-center">
                <i class="fas fa-arrow-up text-pink-600 text-3xl mr-4"></i>
                <div>
                    <h6 class="text-sm font-semibold text-gray-700">Total Cash Inflow</h6>
                    <p class="text-xl text-pink-600">@($"Rs {GetTotalCashInflow():F2}")</p>
                </div>
            </div>

            <!-- Total Cash Outflow -->
            <div class="bg-green-50 p-4 rounded-lg shadow-xl flex items-center">
                <i class="fas fa-arrow-down text-green-600 text-3xl mr-4"></i>
                <div>
                    <h6 class="text-sm font-semibold text-gray-700">Total Cash Outflow</h6>
                    <p class="text-xl text-green-600">@($"Rs {GetTotalCashOutflow():F2}")</p>
                </div>
            </div>

            <!-- Total Debt -->
            <div class="bg-purple-50 p-4 rounded-lg shadow-xl flex items-center">
                <i class="fas fa-hand-holding-usd text-purple-600 text-3xl mr-4"></i>
                <div>
                    <h6 class="text-sm font-semibold text-gray-700">Total Debt</h6>
                    <p class="text-xl text-purple-600">@($"Rs {GetTotalDebt():F2}")</p>
                </div>
            </div>

            <!-- Remaining Debt -->
            <div class="bg-blue-50 p-4 rounded-lg shadow-xl flex items-center">
                <i class="fas fa-exclamation-circle text-blue-600 text-3xl mr-4"></i>
                <div>
                    <h6 class="text-sm font-semibold text-gray-700">Remaining Debt</h6>
                    <p class="text-xl text-blue-600">@($"Rs {RemainingDebt:F2}")</p>
                </div>
            </div>

            <!-- Total Transactions -->
            <div class="bg-yellow-50 p-4 rounded-lg shadow-xl flex items-center">
                <i class="fas fa-list-alt text-yellow-600 text-3xl mr-4"></i>
                <div>
                    <h6 class="text-sm font-semibold text-gray-700">Total Transactions</h6>
                    <p class="text-xl text-yellow-600">@GetTotalTransactions()</p>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Total Balance and Date Filter in Top Right Corner -->
<div class="absolute top-6 right-6 flex items-center space-x-6">
    <!-- Total Balance -->
    <div class="bg-purple-500 text-white py-2 px-6 w-48 rounded-lg shadow-lg transform hover:scale-105 transition-all">
        <h4 class="text-md font-semibold">Total Balance</h4>
        <p class="text-md">@($"Rs {TotalBalance:F2}")</p>
    </div>

    <!-- Date Filter -->
    <div class="flex flex-col items-center">
        <label for="dateFilter" class="text-sm font-semibold text-gray-700">Select Date</label>
        <input type="date" @bind="SelectedDate"
               class="py-2 px-4 border rounded-lg shadow focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:border-indigo-600 mt-2" />
    </div>
</div>

@code {
    private AppData? Data;
    private List<User> Users = new List<User>();
    private DateTime SelectedDate { get; set; } = DateTime.Now;

    private List<Transaction> Transactions => Data?.Transactions
        .Where(t => t.Date.Date == SelectedDate.Date)
        .ToList() ?? new List<Transaction>();

    private string UserName => Users.FirstOrDefault()?.Username ?? "Guest";

    private decimal GetTotalCashInflow() => UserService.LoadData()?.Transactions
        .Where(t => t.Credit > 0 && t.Date.Date == SelectedDate.Date)
        .Sum(t => t.Credit) ?? 0;

    private decimal GetTotalCashOutflow() => UserService.LoadData()?.Transactions
        .Where(t => t.Debit > 0 && t.Date.Date == SelectedDate.Date)
        .Sum(t => t.Debit) ?? 0;

    private decimal GetTotalDebt() => UserService.LoadData()?.Debts
        .Where(d => d.Date.Date == SelectedDate.Date && d.Amount > 0)
        .Sum(d => d.Amount) ?? 0;

    // Updated Remaining Debt Calculation
    private decimal RemainingDebt => Math.Max(GetTotalDebt() - GetTotalCashOutflow(), 0);

    private decimal TotalBalance => GetTotalCashInflow() + GetTotalDebt();

    private int GetTotalTransactions() => UserService.LoadData()?.Transactions.Count ?? 0;

    protected override void OnInitialized()
    {
        Data = new AppData();
        Users = UserService.LoadUsers();
    }
}
