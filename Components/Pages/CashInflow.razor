@page "/CashInflow"
@using MauiApp1.Models
@inject NavigationManager Navigation
@inject UserService UserService

<h3 class="text-2xl font-bold mb-5 text-center text-orange-700">Add Cash Inflow</h3>

<form class="space-y-5 bg-white p-6 rounded-lg shadow-md max-w-md mx-auto border border-gray-200">
    <div>
        <label for="title" class="block text-md font-medium text-gray-800">Title:</label>
        <input type="text" id="title" name="title" @bind="Title" required
               class="mt-2 block w-full px-4 py-3 border-2 border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500" />
    </div>

    <div>
        <label for="tags" class="block text-lg font-medium text-gray-800">Tags:</label>
        <select id="tags" name="tags" @bind="Tags" required
                class="mt-3 block w-full px-6 py-4 border-2 border-gray-300 rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:border-indigo-600 transition duration-300">
            <option value="">Select a Tags</option>
            <option value="Yearly">Yearly</option>
            <option value="Monthly">Monthly</option>
            <option value="Food">Food</option>
            <option value="Drink">Drink</option>
            <option value="Clothes">Clothes</option>
            <option value="Gadgets">Gadgets</option>
            <option value="Miscellaneous">Miscellaneous</option>
            <option value="Fuel">Fuel</option>
            <option value="Rent">Rent</option>
            <option value="EMI">EMI</option>
            <option value="Party">Party</option>
        </select>
        @if (!string.IsNullOrEmpty(TagsError))
        {
            <div class="text-red-600 text-sm mt-1">@TagsError</div>
        }
    </div>


    <div>
        <label for="credit" class="block text-md font-medium text-gray-800">Credit:</label>
        <input type="number" id="credit" name="credit" @bind="Credit" required
               class="mt-2 block w-full px-4 py-3 border-2 border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
               step="any" min="0" />
    </div>

    <div>
        <label for="description" class="block text-md font-medium text-gray-800">Description:</label>
        <textarea id="description" name="description" @bind="Description" rows="3" required
                  class="mt-2 block w-full px-4 py-3 border-2 border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500"></textarea>
    </div>

    <div class="flex justify-center">
        <button type="button" @onclick="HandleCashInflow"
                class="px-6 py-3 bg-purple-500 text-white font-semibold rounded-md shadow-md hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-1 transition duration-300 ease-in-out transform hover:scale-105">
            Submit
        </button>
    </div>
</form>

@code {
    private string Title { get; set; }
    private string Tags { get; set; }
    private decimal Credit { get; set; }
    private string Description { get; set; }
    private int CurrentUserId { get; set; }
    private string TagsError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the current user ID
        CurrentUserId = await UserService.GetCurrentUserIdAsync();
    }

    private async Task HandleCashInflow()
    {
        TagsError = null;

        // Validate input fields
        if (string.IsNullOrWhiteSpace(Title) || string.IsNullOrWhiteSpace(Tags) || Credit <= 0 || string.IsNullOrWhiteSpace(Description))
        {
            if (string.IsNullOrWhiteSpace(Tags))
            {
                TagsError = "Please select a valid tag.";
            }
            return;
        }
      
        // Create a new Transaction
        var transaction = new Transaction
            {
                Title = Title,
                Tags = Tags,
                Credit = Credit,
                Debit = 0, 
                Description = Description,
                Date = DateTime.Now,
                UserId = CurrentUserId 
            };

        // Add the transaction for the current user
        UserService.AddTransaction(transaction);

        // Navigate to the transactions page
        Navigation.NavigateTo("/mytransaction");
    }
}
